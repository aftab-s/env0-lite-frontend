{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 109, "column": 0}, "map": {"version":3,"sources":["file:///D:/TerraformProject/env0-lite-frontend/src/lib/session.ts"],"sourcesContent":["import { User, getServerSession } from 'next-auth'\r\n\r\nexport const session = async ({ session, token }: any) => {\r\n  if (!session.user) session.user = {};\r\n\r\n  session.user.email = token.email;\r\n  session.user.name = token.name;\r\n  session.user.role = token.role;\r\n  session.user.githubAccessToken = token.githubAccessToken; // this is the key\r\n  return session;\r\n}\r\n\r\nexport const getUserSession = async (): Promise<User> => {\r\n  const authUserSession = await getServerSession({\r\n    callbacks: {\r\n      session,\r\n    },\r\n  })\r\n  // if (!authUserSession) throw new Error('unauthorized')\r\n  return authUserSession?.user\r\n}"],"names":[],"mappings":";;;;;;AAAA;;AAEO,MAAM,UAAU,OAAO,EAAE,OAAO,EAAE,KAAK,EAAO;IACnD,IAAI,CAAC,QAAQ,IAAI,EAAE,QAAQ,IAAI,GAAG,CAAC;IAEnC,QAAQ,IAAI,CAAC,KAAK,GAAG,MAAM,KAAK;IAChC,QAAQ,IAAI,CAAC,IAAI,GAAG,MAAM,IAAI;IAC9B,QAAQ,IAAI,CAAC,IAAI,GAAG,MAAM,IAAI;IAC9B,QAAQ,IAAI,CAAC,iBAAiB,GAAG,MAAM,iBAAiB,EAAE,kBAAkB;IAC5E,OAAO;AACT;AAEO,MAAM,iBAAiB;IAC5B,MAAM,kBAAkB,MAAM,IAAA,2JAAgB,EAAC;QAC7C,WAAW;YACT;QACF;IACF;IACA,wDAAwD;IACxD,OAAO,iBAAiB;AAC1B","debugId":null}},
    {"offset": {"line": 138, "column": 0}, "map": {"version":3,"sources":["file:///D:/TerraformProject/env0-lite-frontend/src/config/api-endpoints.ts"],"sourcesContent":["const apiEndpoints = {\r\n    auth : {\r\n        signUp: \"/api/users/signup\",\r\n        login: \"/api/users/login\",\r\n        byEmail: \"/api/users/users/email\"\r\n    },\r\n    github: {\r\n        getRepo: \"/api/github-pat/repos\",\r\n        getTree: \"/api/github-pat/repos\",\r\n        getBranch: \"/api/github-pat/repos/get-branch\"\r\n    }\r\n}\r\n\r\nexport {apiEndpoints}"],"names":[],"mappings":";;;;AAAA,MAAM,eAAe;IACjB,MAAO;QACH,QAAQ;QACR,OAAO;QACP,SAAS;IACb;IACA,QAAQ;QACJ,SAAS;QACT,SAAS;QACT,WAAW;IACf;AACJ","debugId":null}},
    {"offset": {"line": 189, "column": 0}, "map": {"version":3,"sources":["file:///D:/TerraformProject/env0-lite-frontend/src/config/axios.ts"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst axiosPrivate = axios.create({\r\n    baseURL: \"http://localhost:5000\",\r\n    withCredentials: true,\r\n});\r\n\r\nexport default axiosPrivate;"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,eAAe,kJAAK,CAAC,MAAM,CAAC;IAC9B,SAAS;IACT,iBAAiB;AACrB;uCAEe","debugId":null}},
    {"offset": {"line": 204, "column": 0}, "map": {"version":3,"sources":["file:///D:/TerraformProject/env0-lite-frontend/src/config/index.ts"],"sourcesContent":["export * from \"./api-endpoints\";\r\nexport * from \"./axios\""],"names":[],"mappings":";AAAA;AACA","debugId":null}},
    {"offset": {"line": 213, "column": 0}, "map": {"version":3,"sources":["file:///D:/TerraformProject/env0-lite-frontend/src/services/query/useAuthentication.ts"],"sourcesContent":["import { apiEndpoints } from \"@/config\";\r\nimport axiosPrivate from \"@/config/axios\";\r\n\r\ninterface LogInParams {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\ninterface SignInParams {\r\n  name: string;\r\n  email: string;\r\n  password: string;\r\n  role: string;\r\n}\r\n\r\ninterface AuthSignInParams {\r\n  name: string;\r\n  email: string;\r\n  role: string;\r\n  password: string\r\n}\r\n\r\ninterface SignInResponse {\r\n  email: string;\r\n  role: string;\r\n  name: string\r\n}\r\n\r\ninterface SignInByEmailResponse { \r\n    name: string,\r\n    email: string,\r\n    role: string,\r\n}\r\n\r\nexport async function logIn(params: LogInParams): Promise<SignInResponse> {\r\n  const apiBaseUrl = apiEndpoints.auth;\r\n\r\n  const response = await axiosPrivate.post(apiBaseUrl.login, params);\r\n  return response.data;\r\n}\r\n\r\nexport async function signIn(params: SignInParams): Promise<SignInResponse> {\r\n  const apiBaseUrl = apiEndpoints.auth;\r\n\r\n  const response = await axiosPrivate.post(apiBaseUrl.signUp, params);\r\n  return response.data;\r\n}\r\n\r\nexport async function authSignIn(params: AuthSignInParams): Promise<SignInResponse> {\r\n  const apiBaseUrl = apiEndpoints.auth;\r\n\r\n  const response = await axiosPrivate.post(apiBaseUrl.signUp, params);\r\n  return response.data;\r\n}\r\n\r\nexport const checkUserByEmail = async ({ email }: { email: string }) => {\r\n  const apiBaseUrl = apiEndpoints.auth;\r\n\r\n  try {\r\n    const response = await axiosPrivate.post(apiBaseUrl.byEmail, { email });\r\n    return response.data; // existing user\r\n  } catch (err: any) {\r\n    \r\n    if (err.response?.status === 404) {\r\n      return null;\r\n    }\r\n    throw err;\r\n  }\r\n}\r\n\r\n"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AACA;;;AAiCO,eAAe,MAAM,MAAmB;IAC7C,MAAM,aAAa,mJAAY,CAAC,IAAI;IAEpC,MAAM,WAAW,MAAM,mIAAY,CAAC,IAAI,CAAC,WAAW,KAAK,EAAE;IAC3D,OAAO,SAAS,IAAI;AACtB;AAEO,eAAe,OAAO,MAAoB;IAC/C,MAAM,aAAa,mJAAY,CAAC,IAAI;IAEpC,MAAM,WAAW,MAAM,mIAAY,CAAC,IAAI,CAAC,WAAW,MAAM,EAAE;IAC5D,OAAO,SAAS,IAAI;AACtB;AAEO,eAAe,WAAW,MAAwB;IACvD,MAAM,aAAa,mJAAY,CAAC,IAAI;IAEpC,MAAM,WAAW,MAAM,mIAAY,CAAC,IAAI,CAAC,WAAW,MAAM,EAAE;IAC5D,OAAO,SAAS,IAAI;AACtB;AAEO,MAAM,mBAAmB,OAAO,EAAE,KAAK,EAAqB;IACjE,MAAM,aAAa,mJAAY,CAAC,IAAI;IAEpC,IAAI;QACF,MAAM,WAAW,MAAM,mIAAY,CAAC,IAAI,CAAC,WAAW,OAAO,EAAE;YAAE;QAAM;QACrE,OAAO,SAAS,IAAI,EAAE,gBAAgB;IACxC,EAAE,OAAO,KAAU;QAEjB,IAAI,IAAI,QAAQ,EAAE,WAAW,KAAK;YAChC,OAAO;QACT;QACA,MAAM;IACR;AACF","debugId":null}},
    {"offset": {"line": 261, "column": 0}, "map": {"version":3,"sources":["file:///D:/TerraformProject/env0-lite-frontend/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth, { NextAuthOptions } from \"next-auth\"\r\nimport GoogleProvider from \"next-auth/providers/google\"\r\nimport GitHubProvider from \"next-auth/providers/github\"\r\nimport GitLabProvider from \"next-auth/providers/gitlab\"\r\nimport { session } from \"@/lib/session\"\r\nimport { checkUserByEmail, authSignIn } from \"@/services/query/useAuthentication\"\r\n\r\nconst authOptions: NextAuthOptions = {\r\n  session: {\r\n    strategy: \"jwt\",\r\n  },\r\n  providers: [\r\n    GoogleProvider({\r\n      clientId: process.env.GOOGLE_CLIENT_ID!,\r\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\r\n    }),\r\n    GitHubProvider({\r\n      clientId: process.env.GITHUB_CLIENT_ID!,\r\n      clientSecret: process.env.GITHUB_CLIENT_SECRET!,\r\n      authorization: { params: { scope: \"read:user user:email repo\" } },\r\n    }),\r\n    GitLabProvider({\r\n      clientId: process.env.GITLAB_CLIENT_ID!,\r\n      clientSecret: process.env.GITLAB_CLIENT_SECRET!,\r\n    }),\r\n  ],\r\n  callbacks: {\r\n    session,\r\n\r\n    async jwt({ token, profile, account }) {\r\n      \r\n      if (!profile?.email) return token\r\n\r\n      try {\r\n        let existingUser = await checkUserByEmail({ email: profile.email })\r\n\r\n        if (!existingUser) {\r\n          existingUser = await authSignIn({\r\n            email: profile.email,\r\n            name: profile.name || \"\",\r\n            role: 'user',\r\n            password: 'null'\r\n          })\r\n        }\r\n\r\n        // 3. Attach DB info to JWT\r\n        token.email = existingUser.email\r\n        token.role = existingUser.role || \"user\"\r\n        token.name = existingUser.name\r\n\r\n        if (account?.access_token) {\r\n          token.githubAccessToken = account.access_token;\r\n        }\r\n      } catch (err) {\r\n        console.error(\"JWT DB error:\", err)\r\n      }\r\n\r\n      return token\r\n    },\r\n    // async redirect({ url, baseUrl }) {\r\n    // return `${baseUrl}/dashboard`;\r\n  // },\r\n  },\r\n  pages: {\r\n    signIn: \"/\",   \r\n    error: \"/\", \r\n\r\n  },\r\n  events: {\r\n    async signIn({ user }) {\r\n      console.log(\"âœ… User signed in:\", user.email)\r\n    },\r\n  },\r\n  \r\n}\r\n\r\nconst handler = NextAuth(authOptions)\r\nexport { handler as GET, handler as POST }\r\n"],"names":[],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA,MAAM,cAA+B;IACnC,SAAS;QACP,UAAU;IACZ;IACA,WAAW;QACT,IAAA,gKAAc,EAAC;YACb,UAAU,QAAQ,GAAG,CAAC,gBAAgB;YACtC,cAAc,QAAQ,GAAG,CAAC,oBAAoB;QAChD;QACA,IAAA,gKAAc,EAAC;YACb,UAAU,QAAQ,GAAG,CAAC,gBAAgB;YACtC,cAAc,QAAQ,GAAG,CAAC,oBAAoB;YAC9C,eAAe;gBAAE,QAAQ;oBAAE,OAAO;gBAA4B;YAAE;QAClE;QACA,IAAA,gKAAc,EAAC;YACb,UAAU,QAAQ,GAAG,CAAC,gBAAgB;YACtC,cAAc,QAAQ,GAAG,CAAC,oBAAoB;QAChD;KACD;IACD,WAAW;QACT,SAAA,kIAAO;QAEP,MAAM,KAAI,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE;YAEnC,IAAI,CAAC,SAAS,OAAO,OAAO;YAE5B,IAAI;gBACF,IAAI,eAAe,MAAM,IAAA,mKAAgB,EAAC;oBAAE,OAAO,QAAQ,KAAK;gBAAC;gBAEjE,IAAI,CAAC,cAAc;oBACjB,eAAe,MAAM,IAAA,6JAAU,EAAC;wBAC9B,OAAO,QAAQ,KAAK;wBACpB,MAAM,QAAQ,IAAI,IAAI;wBACtB,MAAM;wBACN,UAAU;oBACZ;gBACF;gBAEA,2BAA2B;gBAC3B,MAAM,KAAK,GAAG,aAAa,KAAK;gBAChC,MAAM,IAAI,GAAG,aAAa,IAAI,IAAI;gBAClC,MAAM,IAAI,GAAG,aAAa,IAAI;gBAE9B,IAAI,SAAS,cAAc;oBACzB,MAAM,iBAAiB,GAAG,QAAQ,YAAY;gBAChD;YACF,EAAE,OAAO,KAAK;gBACZ,QAAQ,KAAK,CAAC,iBAAiB;YACjC;YAEA,OAAO;QACT;IAIF;IACA,OAAO;QACL,QAAQ;QACR,OAAO;IAET;IACA,QAAQ;QACN,MAAM,QAAO,EAAE,IAAI,EAAE;YACnB,QAAQ,GAAG,CAAC,qBAAqB,KAAK,KAAK;QAC7C;IACF;AAEF;AAEA,MAAM,UAAU,IAAA,kJAAQ,EAAC","debugId":null}}]
}