{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 109, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/sures/Desktop/Env0/env0-lite-frontend/src/lib/session.ts"],"sourcesContent":["import { User, getServerSession } from 'next-auth'\r\n\r\nexport const session = async ({ session, token }: any) => {\r\n  session.user.id = token.id\r\n  return session\r\n}\r\n\r\nexport const getUserSession = async (): Promise<User> => {\r\n  const authUserSession = await getServerSession({\r\n    callbacks: {\r\n      session,\r\n    },\r\n  })\r\n  // if (!authUserSession) throw new Error('unauthorized')\r\n  return authUserSession?.user\r\n}"],"names":[],"mappings":";;;;;;AAAA;;AAEO,MAAM,UAAU,OAAO,EAAE,OAAO,EAAE,KAAK,EAAO;IACnD,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;IAC1B,OAAO;AACT;AAEO,MAAM,iBAAiB;IAC5B,MAAM,kBAAkB,MAAM,IAAA,2JAAgB,EAAC;QAC7C,WAAW;YACT;QACF;IACF;IACA,wDAAwD;IACxD,OAAO,iBAAiB;AAC1B","debugId":null}},
    {"offset": {"line": 134, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/sures/Desktop/Env0/env0-lite-frontend/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import { session } from '@/lib/session'\r\nimport { NextAuthOptions } from 'next-auth'\r\nimport NextAuth from 'next-auth/next'\r\nimport GoogleProvider from 'next-auth/providers/google'\r\nimport GithubProvider from 'next-auth/providers/github'\r\nimport GitlabProvider from 'next-auth/providers/gitlab'\r\nimport { OAuthConfig, OAuthUserConfig } from 'next-auth/providers/oauth'\r\n\r\n\r\nconst GOOGLE_CLIENT_ID = process.env.GOOGLE_CLIENT_ID!\r\nconst GOOGLE_CLIENT_SECRET = process.env.GOOGLE_CLIENT_SECRET!\r\nconst GITHUB_CLIENT_ID = process.env.GITHUB_CLIENT_ID!\r\nconst GITHUB_CLIENT_SECRET = process.env.GITHUB_CLIENT_SECRET!\r\n\r\nconst authOption: NextAuthOptions = {\r\n  session: {\r\n    strategy: 'jwt',\r\n  },\r\n  providers: [\r\n     GithubProvider({\r\n      clientId: GITHUB_CLIENT_ID,\r\n      clientSecret: GITHUB_CLIENT_SECRET,\r\n    }),\r\n    GoogleProvider({\r\n      clientId: GOOGLE_CLIENT_ID,\r\n      clientSecret: GOOGLE_CLIENT_SECRET,\r\n    }),\r\n    GitlabProvider({\r\n      clientId: process.env.GITLAB_CLIENT_ID!,\r\n      clientSecret: process.env.GITLAB_CLIENT_SECRET!,\r\n    }),\r\n    BitbucketProvider({\r\n      clientId: process.env.GITLAB_CLIENT_ID!,\r\n      clientSecret: process.env.GITLAB_CLIENT_SECRET!,\r\n    }),\r\n  ],\r\n  callbacks: {\r\n    async signIn({ account, profile }) {\r\n      if (!profile?.email) {\r\n        throw new Error('No profile')\r\n      }\r\n\r\n      return true\r\n    },\r\n    session,\r\n    // async jwt({ token, user, account, profile }) {\r\n    //   if (profile) {\r\n    //     const user = await prisma.user.findUnique({\r\n    //       where: {\r\n    //         email: profile.email,\r\n    //       },\r\n    //     })\r\n    //     if (!user) {\r\n    //       throw new Error('No user found')\r\n    //     }\r\n    //     token.id = user.id\r\n    //   }\r\n    //   return token\r\n    // },\r\n  },\r\n}\r\n\r\nexport default function BitbucketProvider<P extends Record<string, any>>(\r\n  options: OAuthUserConfig<P>\r\n): OAuthConfig<P> {\r\n  return {\r\n    id: \"bitbucket\",\r\n    name: \"Bitbucket\",\r\n    type: \"oauth\",\r\n    authorization: {\r\n      url: \"https://bitbucket.org/site/oauth2/authorize\",\r\n      params: { scope: \"account email\" }, // ðŸ‘ˆ scope goes here\r\n    },\r\n    token: \"https://bitbucket.org/site/oauth2/access_token\",\r\n    userinfo: \"https://api.bitbucket.org/2.0/user\",\r\n    async profile(profile, tokens) {\r\n      return {\r\n        id: profile.uuid,\r\n        name: profile.display_name,\r\n        email: profile.email ?? null, // may require /2.0/user/emails API call\r\n        image: profile.links?.avatar?.href ?? null,\r\n      };\r\n    },\r\n    options,\r\n  };\r\n}\r\n\r\n\r\nconst handler = NextAuth(authOption)\r\nexport { handler as GET, handler as POST }"],"names":[],"mappings":";;;;;;;;AAAA;AAEA;AACA;AACA;AACA;;;;;;AAIA,MAAM,mBAAmB,QAAQ,GAAG,CAAC,gBAAgB;AACrD,MAAM,uBAAuB,QAAQ,GAAG,CAAC,oBAAoB;AAC7D,MAAM,mBAAmB,QAAQ,GAAG,CAAC,gBAAgB;AACrD,MAAM,uBAAuB,QAAQ,GAAG,CAAC,oBAAoB;AAE7D,MAAM,aAA8B;IAClC,SAAS;QACP,UAAU;IACZ;IACA,WAAW;QACR,IAAA,gKAAc,EAAC;YACd,UAAU;YACV,cAAc;QAChB;QACA,IAAA,gKAAc,EAAC;YACb,UAAU;YACV,cAAc;QAChB;QACA,IAAA,gKAAc,EAAC;YACb,UAAU,QAAQ,GAAG,CAAC,gBAAgB;YACtC,cAAc,QAAQ,GAAG,CAAC,oBAAoB;QAChD;QACA,kBAAkB;YAChB,UAAU,QAAQ,GAAG,CAAC,gBAAgB;YACtC,cAAc,QAAQ,GAAG,CAAC,oBAAoB;QAChD;KACD;IACD,WAAW;QACT,MAAM,QAAO,EAAE,OAAO,EAAE,OAAO,EAAE;YAC/B,IAAI,CAAC,SAAS,OAAO;gBACnB,MAAM,IAAI,MAAM;YAClB;YAEA,OAAO;QACT;QACA,SAAA,kIAAO;IAeT;AACF;AAEe,SAAS,kBACtB,OAA2B;IAE3B,OAAO;QACL,IAAI;QACJ,MAAM;QACN,MAAM;QACN,eAAe;YACb,KAAK;YACL,QAAQ;gBAAE,OAAO;YAAgB;QACnC;QACA,OAAO;QACP,UAAU;QACV,MAAM,SAAQ,OAAO,EAAE,MAAM;YAC3B,OAAO;gBACL,IAAI,QAAQ,IAAI;gBAChB,MAAM,QAAQ,YAAY;gBAC1B,OAAO,QAAQ,KAAK,IAAI;gBACxB,OAAO,QAAQ,KAAK,EAAE,QAAQ,QAAQ;YACxC;QACF;QACA;IACF;AACF;AAGA,MAAM,UAAU,IAAA,0JAAQ,EAAC","debugId":null}}]
}