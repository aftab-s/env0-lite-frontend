{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 10, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/sures/Desktop/Env0/env0-lite-frontend/src/app/providers.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { SessionProvider } from \"next-auth/react\";\r\nimport { ReactNode } from \"react\";\r\n\r\nexport default function Providers({ children }: { children: ReactNode }) {\r\n  return <SessionProvider>{children}</SessionProvider>;\r\n}\r\n"],"names":[],"mappings":";;;;;AAEA;AAFA;;;AAKe,SAAS,UAAU,EAAE,QAAQ,EAA2B;IACrE,qBAAO,8OAAC,iKAAe;kBAAE;;;;;;AAC3B","debugId":null}},
    {"offset": {"line": 32, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/sures/Desktop/Env0/env0-lite-frontend/src/context/DarkModeProvider.tsx"],"sourcesContent":["\"use client\";\r\nimport { createContext, useContext, useState } from \"react\";\r\n\r\ntype DarkModeContextType = {\r\n  darkMode: boolean;\r\n  toggleDarkMode: () => void;\r\n};\r\n\r\nconst DarkModeContext = createContext<DarkModeContextType | undefined>(undefined);\r\n\r\nexport const DarkModeProvider = ({ children }: { children: React.ReactNode }) => {\r\n  const [darkMode, setDarkMode] = useState(false);\r\n\r\n  const toggleDarkMode = () => setDarkMode((prev) => !prev);\r\n\r\n  return (\r\n    <DarkModeContext.Provider value={{ darkMode, toggleDarkMode }}>\r\n      {children}\r\n    </DarkModeContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useDarkMode = () => {\r\n  const ctx = useContext(DarkModeContext);\r\n  if (!ctx) throw new Error(\"useDarkMode must be used within DarkModeProvider\");\r\n  return ctx;\r\n};\r\n"],"names":[],"mappings":";;;;;;;AACA;AADA;;;AAQA,MAAM,gCAAkB,IAAA,sNAAa,EAAkC;AAEhE,MAAM,mBAAmB,CAAC,EAAE,QAAQ,EAAiC;IAC1E,MAAM,CAAC,UAAU,YAAY,GAAG,IAAA,iNAAQ,EAAC;IAEzC,MAAM,iBAAiB,IAAM,YAAY,CAAC,OAAS,CAAC;IAEpD,qBACE,8OAAC,gBAAgB,QAAQ;QAAC,OAAO;YAAE;YAAU;QAAe;kBACzD;;;;;;AAGP;AAEO,MAAM,cAAc;IACzB,MAAM,MAAM,IAAA,mNAAU,EAAC;IACvB,IAAI,CAAC,KAAK,MAAM,IAAI,MAAM;IAC1B,OAAO;AACT","debugId":null}}]
}